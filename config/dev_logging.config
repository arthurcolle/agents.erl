% Development logging - shows more detail for debugging
[
  {agent_web, [
    {port, 8080},
    {disable_colors, false},
    {log_timestamp_format, short}
  ]},
  {kernel, [
    {logger_level, debug},  % More verbose
    {logger, [
      {handler, default, undefined},
      {handler, dev_agent_handler, colored_logger_handler, #{
        level => all,
        config => #{disable_colors => false},
        filters => [
          % Still filter out OTP noise
          {domain, {fun logger_filters:domain/2, {stop, equal, [otp]}}},
          
          % Less aggressive Ranch/Cowboy filtering for dev
          {ranch_cowboy_dev_filter, {fun(LogEvent, _) ->
            case LogEvent of
              #{msg := {report, #{label := {error_logger, error_msg}, 
                                  format := Format}}} when 
                  Format =:= \"Ranch listener ~p, connection process ~p, stream ~p had its request process ~p exit with reason ~999999p and stacktrace ~999999p~n\" ->
                stop;  % Still filter the verbose Ranch errors
              _ ->
                ignore
            end
          end, ok}},
          
          % Allow most agent-related messages in dev mode
          {agent_dev_filter, {fun(LogEvent, _) ->
            case LogEvent of
              #{meta := #{module := Module}} when is_atom(Module) ->
                ModuleName = atom_to_list(Module),
                % Be more permissive in dev mode
                IsRelevant = lists:any(fun(Pattern) ->
                  string:str(string:to_lower(ModuleName), Pattern) > 0
                end, [\"agent\", \"mcp\", \"tool\", \"stream\", \"chat\", \"sup\", \"handler\"]),
                case IsRelevant of
                  true -> ignore;
                  false -> stop
                end;
              _ ->
                % More permissive in dev mode
                ignore
            end
          end, ok}}
        ]
      }}
    ]},
    {error_logger, silent}
  ]}
].
