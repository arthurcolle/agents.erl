[
  {agent_web, [
    {port, 8080},
    {disable_colors, false},
    {log_timestamp_format, short}
  ]},
  {kernel, [
    {logger_level, info},
    {logger, [
      {handler, default, undefined},  % Disable default handler
      {handler, focused_agent_handler, colored_logger_handler, #{
        level => all,
        config => #{disable_colors => false},
        filters => [
          % Filter out all OTP messages
          {domain, {fun logger_filters:domain/2, {stop, equal, [otp]}}},
          
          % Filter out Ranch/Cowboy noise
          {ranch_cowboy_filter, {fun(LogEvent, _) ->
            case LogEvent of
              #{msg := {report, #{label := {error_logger, error_msg}}}} ->
                stop;
              #{msg := {report, #{args := [ranch_listener | _]}}} ->
                stop;
              #{msg := {report, #{args := [cowboy | _]}}} ->
                stop;
              #{msg := {string, Msg}} when is_list(Msg) ->
                % Filter out generic Ranch/Cowboy messages
                case string:str(Msg, "Ranch") > 0 orelse string:str(Msg, "cowboy") > 0 of
                  true -> stop;
                  false -> ignore
                end;
              _ ->
                ignore
            end
          end, ok}},
          
          % Only allow agent/tool/MCP related messages
          {agent_focus_filter, {fun(LogEvent, _) ->
            case LogEvent of
              #{msg := {report, #{label := {supervisor, _}}}} ->
                % Allow supervisor reports for agent modules
                ignore;
              #{msg := {string, Msg}} when is_list(Msg) ->
                IsAgentRelated = lists:any(fun(Pattern) ->
                  string:str(string:to_lower(Msg), Pattern) > 0
                end, ["agent", "mcp", "tool", "function", "stream", "chat", "ai"]),
                case IsAgentRelated of
                  true -> ignore;  % Let it through
                  false -> stop    % Filter it out
                end;
              #{msg := {Fmt, Args}} when is_list(Fmt), is_list(Args) ->
                try
                  Msg = io_lib:format(Fmt, Args),
                  IsAgentRelated = lists:any(fun(Pattern) ->
                    string:str(string:to_lower(lists:flatten(Msg)), Pattern) > 0
                  end, ["agent", "mcp", "tool", "function", "stream", "chat", "ai"]),
                  case IsAgentRelated of
                    true -> ignore;  % Let it through
                    false -> stop    % Filter it out
                  end
                catch
                  _:_ -> ignore  % If formatting fails, let it through
                end;
              % Allow colored_logger messages (they're likely agent-related)
              #{meta := #{module := colored_logger}} ->
                ignore;
              % Allow messages from agent modules
              #{meta := #{module := Module}} when is_atom(Module) ->
                ModuleName = atom_to_list(Module),
                IsAgentModule = lists:any(fun(Pattern) ->
                  string:str(string:to_lower(ModuleName), Pattern) > 0
                end, ["agent", "mcp", "tool", "stream", "chat"]),
                case IsAgentModule of
                  true -> ignore;  % Let it through
                  false -> stop    % Filter it out
                end;
              _ ->
                % Default: filter out unless explicitly agent-related
                stop
            end
          end, ok}}
        ]
      }}
    ]},
    {error_logger, silent}
  ]}
].