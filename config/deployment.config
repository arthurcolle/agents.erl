%% deployment.config
%% Comprehensive deployment configuration for agent chat system
%% Integrates all configurations with streaming token serialization via jiffy

[
  %% Core Agent Web Configuration
  {agent_web, [
    {port, 8080},
    {host, "0.0.0.0"},
    {disable_colors, false},
    {enable_colored_logging, true},
    {log_timestamp_format, short},
    {enable_meta_supervision, true},
    {enable_enhanced_error_reporting, true},
    {enable_real_time_monitoring, true},
    {enable_chat_interface, true},
    {max_connections, 1000},
    {request_timeout, 30000},
    
    %% Chat-specific configuration
    {chat_settings, [
      {max_message_length, 10000},
      {max_history_length, 100},
      {enable_streaming_responses, true},
      {streaming_chunk_size, 1024},
      {websocket_timeout, 300000}
    ]},
    
    %% JSON serialization configuration
    {json_serializer, jiffy},
    {json_options, [
      {escape_forward_slashes, false},
      {use_nil, false},
      {return_maps, true}
    ]},
    
    %% CORS configuration for frontend
    {cors_enabled, true},
    {cors_origins, ["http://localhost:3000", "http://localhost:8080"]},
    {cors_headers, ["content-type", "authorization", "x-requested-with"]},
    {cors_methods, ["GET", "POST", "PUT", "DELETE", "OPTIONS"]}
  ]},
  
  %% Agent System Configuration
  {agents, [
    {enable_colored_logging, true},
    {enable_quantum_coordination, true},
    {enable_meta_supervision, true},
    {max_agents, 10000},
    {agent_restart_intensity, 10},
    {agent_restart_period, 60},
    
    %% Chat agent configuration
    {default_chat_agents, [
      #{
        name => <<"Assistant">>,
        type => ai,
        model => <<"gpt-4o">>,
        api_preference => responses,
        system_prompt => <<"You are a helpful AI assistant with access to various tools and capabilities. You can help with research, analysis, code, and general questions.">>,
        tools => [search, file_read, file_write, shell, weather, calculator],
        streaming_enabled => true
      },
      #{
        name => <<"Research Agent">>,
        type => ai,
        model => <<"gpt-4o-mini">>,
        api_preference => responses,
        system_prompt => <<"You are a research specialist with access to web search and knowledge bases. You excel at finding information and providing detailed analysis.">>,
        tools => [jina_search, jina_read_webpage, jina_fact_check, knowledge_search],
        streaming_enabled => true
      },
      #{
        name => <<"Code Agent">>,
        type => ai,
        model => <<"claude-3-5-sonnet-20241022">>,
        api_preference => chat,
        system_prompt => <<"You are a programming expert specializing in Erlang, Python, JavaScript, and system architecture. You can write, review, and explain code.">>,
        tools => [file_read, file_write, shell, git_operations, code_analysis],
        streaming_enabled => true
      }
    ]},
    
    %% Tool configuration
    {available_tools, [
      search, file_read, file_write, shell, weather, calculator,
      jina_search, jina_read_webpage, jina_fact_check, knowledge_search,
      git_operations, code_analysis, image_analysis, data_analysis
    ]}
  ]},
  
  %% OpenAI Configuration
  {openai, [
    {enable_colored_logging, true},
    {enable_cost_tracking, true},
    {enable_streaming, true},
    {rate_limit_enabled, true},
    {default_model, "gpt-4o"},
    {fallback_model, "gpt-4o-mini"},
    
    %% Streaming configuration with jiffy
    {streaming_config, [
      {enabled, true},
      {chunk_handler, token_stream_handler},
      {serializer, jiffy},
      {buffer_size, 1024},
      {flush_interval, 100}, % milliseconds
      {compression, false}
    ]},
    
    %% Rate limiting
    {rate_limits, [
      {requests_per_minute, 500},
      {tokens_per_minute, 200000},
      {concurrent_requests, 50}
    ]},
    
    %% Cost management
    {cost_tracking, [
      {enabled, true},
      {max_daily_cost, 100.0}, % USD
      {alert_threshold, 80.0}, % percentage
      {budget_tracking, true}
    ]}
  ]},
  
  %% Logging Configuration
  {kernel, [
    {logger_level, info},
    {error_logger, {file, "logs/kernel.log"}},
    {logger, [
      {handler, colored_console, colored_logger_handler, #{
        level => info,
        formatter => {colored_logger, #{
          single_line => false,
          depth => 30,
          chars_limit => 8192,
          template => [time, " ", level, " ", msg, "\n"]
        }}
      }},
      {handler, file_log, logger_std_h, #{
        level => info,
        config => #{
          file => "logs/system.log",
          max_no_files => 10,
          max_no_bytes => 10485760
        },
        formatter => {logger_formatter, #{
          single_line => false,
          depth => 30,
          template => [time, " ", level, " [", pid, "] ", msg, "\n"]
        }}
      }},
      {handler, chat_log, logger_std_h, #{
        level => info,
        config => #{
          file => "logs/chat.log",
          max_no_files => 5,
          max_no_bytes => 50000000 % 50MB
        },
        formatter => {logger_formatter, #{
          single_line => false,
          depth => 50,
          template => [time, " [CHAT] ", msg, "\n"]
        }}
      }}
    ]}
  ]},
  
  %% SASL Configuration
  {sasl, [
    {sasl_error_logger, {file, "logs/sasl.log"}},
    {errlog_type, error},
    {error_logger_mf_dir, "logs"},
    {error_logger_mf_maxbytes, 10485760},
    {error_logger_mf_maxfiles, 10}
  ]},
  
  %% SSL/TLS Configuration (optional)
  {ssl, [
    {session_cache_server_max, 1000},
    {session_cache_client_max, 1000},
    {session_lifetime, 300} % 5 minutes
  ]},
  
  %% Performance Configuration
  {performance, [
    {max_concurrent_chats, 100},
    {message_queue_size, 1000},
    {gc_options, [
      {fullsweep_after, 512},
      {min_heap_size, 233},
      {min_bin_vheap_size, 46422}
    ]}
  ]},
  
  %% Feature Flags
  {features, [
    {streaming_enabled, true},
    {function_calling_enabled, true},
    {multi_agent_chat, true},
    {voice_interface, false},
    {image_generation, false},
    {file_uploads, true},
    {real_time_collaboration, true}
  ]},
  
  %% Security Configuration
  {security, [
    {enable_rate_limiting, true},
    {max_request_size, 10485760}, % 10MB
    {allowed_file_types, [".txt", ".md", ".json", ".csv", ".log"]},
    {enable_input_sanitization, true},
    {session_timeout, 3600000} % 1 hour
  ]},
  
  %% Database Configuration (if needed)
  {database, [
    {type, sqlite},
    {file, "data/agents.db"},
    {pool_size, 10},
    {timeout, 30000}
  ]},
  
  %% Monitoring and Health Checks
  {monitoring, [
    {health_check_interval, 30000}, % 30 seconds
    {metrics_collection, true},
    {performance_monitoring, true},
    {error_reporting, true}
  ]}
].