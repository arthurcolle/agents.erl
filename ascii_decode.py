#!/usr/bin/env python3
"""
Utility to decode concatenated ASCII decimal codes into text.
"""

def digit_stream_to_text(digits: str) -> str:
    # Keep only digits
    digits = "".join(filter(str.isdigit, digits))
    out = []
    i = 0
    length = len(digits)
    while i < length:
        # Try three-digit code if valid ASCII 100-255
        if i + 2 < length:
            val3 = int(digits[i:i+3])
            if 100 <= val3 <= 255:
                out.append(chr(val3))
                i += 3
                continue
        # Otherwise take two-digit code
        val2 = int(digits[i:i+2])
        out.append(chr(val2))
        i += 2
    return "".join(out)

def main():
    raw = """
4242839910510111099101424232105115329732115121115116101109971161059932101110116101114112114105115101321161049711632981171051081001153297110100321111141039711010512210
1115321071101111191081011001031013210511032116104101321021111141093211110232116101115116979810810132101120112108971109711610511111011532971101003211211410110010599116
1051111101153297981111171163211610410132117110105118101114115101463273116321051101181111081181011153211198115101114118105110103443210112011210111410510910111011610511
0103443297110100329711097108121122105110103321161113211711010010111411511697110100321041111193211097116117114971083211210410111011110910111097321191111141074610104242
7510112132971151121019911611532111102321159910510111099101584242104532424269109112105114105999710858424232669711510110032111110321119811510111411897116105111110329711
0100321011201121011141051091011101163211497116104101114321161049711032111112105110105111110461045324242831211151161011099711610599584242327011110810811111911532111114
1039711010512210110032109101116104111100115329711010032112114111991011151151011153240116104101321159910510111011610510210599321091011161041111004146104532424284101115
1169798108101584242327110111010111497116101115321041211121111161041011151011153211610497116329997110329810132116101115116101100321161041141111171031043210112011210111
4105109101110116971161051111103211111432102117114116104101114321119811510111411897116105111110461045324242799810610199116105118101584242328310110110711532116111321091
0511010510910512210132981059711544321141011081211051101033211111032101118105100101110991014610453242426711710911710897116105118101584242326611710510810011532111110321
1211410111810511111711532107110111119108101100103101443299111114114101991161051101033297110100321141011021051101051101033210510010197115321111181011143211610510910146
1010424273110321151171091099711412158424232321083991051011109910132105115329732119971213211110232105110118101115116105103971161051101033297110100321171101001011141151
1697110100105110103321161041013211911111410810032981213210397116104101114105110103321011181051001011109910144321021111141091051101033211610410111111410510111544329711
0100329911111011610511011711111711510812132116101115116105110103329711010032114101102105110105110103321161041111151013211610410111111410510111546
"""
    decoded = digit_stream_to_text(raw)
    # Remove non-printable/control characters, keep common whitespace
    cleaned = ''.join(c for c in decoded if (32 <= ord(c) <= 126) or c in '\r\n\t')
    print(cleaned)

if __name__ == '__main__':
    main()