#!/usr/bin/env escript

%% A simple escript-based CLI for interacting with the Erlang Agent for OpenAI API.
%%
%% Usage:
%%   cli hello                  - Run hello world example
%%   cli chat "Your message"    - Simple chat with GPT
%%   cli run [options]          - Run advanced agent with tools

main(Args) ->
    % Add code paths for our applications
    ScriptDir = filename:dirname(escript:script_name()),
    code:add_paths([
        filename:join([ScriptDir, "_build", "default", "lib", "jsx", "ebin"]),
        filename:join([ScriptDir, "_build", "default", "lib", "openai", "ebin"]),
        filename:join([ScriptDir, "_build", "default", "lib", "agent", "ebin"])
    ]),
    
    % Delegate to the actual main function
    do_main(Args).

do_main(["hello"]) ->
    %% No need to ensure application is started for simple hello
    hello_world:run();

do_main(["hello", Message]) ->
    %% No need to ensure application is started for simple hello
    hello_world:run(list_to_binary(Message));

do_main(["chat", Message]) ->
    % Make sure applications are started
    application:ensure_all_started(jsx),
    application:ensure_all_started(inets),
    application:ensure_all_started(ssl),
    
    % Start OpenAI app which will start the chat client
    case application:ensure_all_started(openai) of
        {ok, _} -> ok;
        Error -> 
            io:format("Failed to start openai app: ~p~n", [Error]),
            halt(1)
    end,
    
    % Send the chat message
    case simple_agent:chat(list_to_binary(Message)) of
        {error, Reason} ->
            io:format("Error: ~p~n", [Reason]);
        Response ->
            io:format("~n~s~n", [Response])
    end;

do_main(["run" | Rest]) ->
    % Parse args and run the full agent
    Options = parse_args(Rest, #{}),
    run_agent(Options);

do_main(_) ->
    % Show usage info
    Print = fun(Line) -> io:format("~s~n", [Line]) end,
    Print("Erlang Agent CLI"),
    Print(""),
    Print("Usage:"),
    Print("  ./cli hello                  - Run hello world example"),
    Print("  ./cli hello \"Your message\"   - Run hello world with custom message"),
    Print("  ./cli chat \"Your message\"    - Simple chat with AI"),
    Print("  ./cli run [options]          - Run agent with tools"),
    Print(""),
    Print("Advanced options for 'run' command:"),
    Print("  --prompt \"Your prompt\"       - The prompt to send to the agent (required)"),
    Print("  --tools \"tool1,tool2\"        - Comma-separated list of tools to enable"),
    Print("  --model \"gpt-4\"              - AI model to use"),
    Print("  --system \"System message\"    - Custom system message"),
    Print("  --timeout 120000             - Timeout in milliseconds"),
    Print(""),
    halt(1).

% Original CLI functionality preserved below
parse_args([], Acc) ->
    Acc;
parse_args(["--prompt", Prompt | Rest], Acc) ->
    parse_args(Rest, maps:put(prompt, Prompt, Acc));
parse_args(["--tools", Tools | Rest], Acc) ->
    parse_args(Rest, maps:put(tools, split_tools(Tools), Acc));
parse_args(["--model", Model | Rest], Acc) ->
    parse_args(Rest, maps:put(model, Model, Acc));
parse_args(["--system", Sys | Rest], Acc) ->
    parse_args(Rest, maps:put(system_message, Sys, Acc));
parse_args(["--timeout", TimeoutStr | Rest], Acc) ->
    case catch list_to_integer(TimeoutStr) of
        Timeout when is_integer(Timeout) ->
            parse_args(Rest, maps:put(timeout, Timeout, Acc));
        _ -> usage("Invalid timeout value: " ++ TimeoutStr)
    end;
parse_args([Unknown | _], _Acc) ->
    usage("Unknown argument: " ++ Unknown).

split_tools(Str) ->
    [list_to_atom(string:trim(T)) || T <- string:tokens(Str, ",")].

run_agent(Options) ->
    PromptStr = get_required(Options, prompt),
    Tools = maps:get(tools, Options, []),
    PromptBin = list_to_binary(PromptStr),
    %% Build Options map for agent:run_agent/3
    OptMap = build_opts(Options),
    %% Start application
    {ok, _} = application:ensure_all_started(agent),
    Response = case maps:size(OptMap) > 0 of
        true -> agent:run_agent(PromptBin, Tools, OptMap);
        false -> agent:run_agent(PromptBin, Tools)
    end,
    io:format("~p~n", [Response]).

build_opts(Options) ->
    lists:foldl(fun({Key, Val}, Acc) ->
        case Key of
            model -> maps:put(model, list_to_binary(Val), Acc);
            system_message -> maps:put(system_message, list_to_binary(Val), Acc);
            timeout -> maps:put(timeout, Val, Acc);
            _ -> Acc
        end
    end, #{}, maps:to_list(Options)).

get_required(Options, Key) ->
    case maps:find(Key, Options) of
        {ok, Val} -> Val;
        error -> usage("Missing required option: " ++ atom_to_list(Key))
    end.

usage(Msg) ->
    io:format("Error: ~s~n", [Msg]),
    io:format("Run without arguments for usage information.~n"),
    halt(1).